// Quest√£o 1
// Estrutura:

// FOR: Inicializa√ß√£o, condi√ß√£o e incremento s√£o definidos em uma √∫nica linha.
// WHILE: Apenas a condi√ß√£o √© definida na linha do comando; a inicializa√ß√£o e o incremento s√£o feitos dentro do bloco.

// Uso Comum:
// FOR: Ideal para loops com um n√∫mero fixo de itera√ß√µes.
// WHILE: Ideal para loops onde o n√∫mero de itera√ß√µes depende de uma condi√ß√£o vari√°vel.

// Controle do Loop:
// FOR: Mais compacto, com controle do loop definido na pr√≥pria linha do comando.
// WHILE: Mais flex√≠vel, com controle do loop (inicializa√ß√£o e incremento) dentro do bloco de c√≥digo.

// Exemplo de Uso:
// FOR: Itera√ß√£o sobre arrays ou execu√ß√£o de um bloco de c√≥digo um n√∫mero fixo de vezes.
// WHILE: Execu√ß√£o de um bloco de c√≥digo enquanto uma condi√ß√£o espec√≠fica FOR verdadeira.

// Sem√¢ntica:
// FOR: Enfatiza a contagem e itera√ß√£o.
// WHILE: Enfatiza a condi√ß√£o de continua√ß√£o.

// Quest√£o 2
// üîªO uso do FOR √© quando soubermos o n√∫mero exato de itera√ß√µes ou quando estiver iterando sobre cole√ß√µes como arrays.üîª
// üî∏O uso do WHILE √© quando a condi√ß√£o de t√©rmino n√£o for baseada em um contador simples ou quando precisar de mais
// flexibilidade no controle do loop.üî∏

// Quest√£o 3
let i: number = 0;
while (i < 10) {
  console.log("Testando uma frase");
  i++;
}

// Quest√£o 4
let i2: number = 465484133;
while (i2 > 10) {
  console.log(i2);
  i2 /= 35;
}

// Quest√£o 5
let i3 = 0;
do {
  console.log(i3);
  i3++;
} while (i3 < 5);

// Quest√£o 6
let i4: number = 1;
while (i4 <= 10) {
  console.log(i4);
  i4++;
}

// Quest√£o 7
let i5: number = 10;
while (i5 >= 1) {
  console.log(i5);
  i5--;
}

// Quest√£o 8
let sum = 0;
let i6 = 1;
while (i6 <= 100) {
  sum += i6;
  i6++;
}
console.log("A soma dos n√∫meros de 1 a 100 √©: " + sum);

// Quest√£o 9
let product = 1;
let i7 = 1;
while (i7 <= 5) {
  product *= i7;
  i7++;
}
console.log("O produto dos n√∫meros de 1 a 5 √©: " + product);

// Quest√£o 10
let i8 = 1;
while (i8 <= 10) {
  console.log(`9 x ${i8} = ${9 * i8}`);
  i8++;
}

// Quest√£o 11
let number: number;
let smallest: number;
let largest: number;

console.log("Digite uma sequ√™ncia de n√∫meros inteiros (digite 0 para parar):");

number = Number(prompt("Digite um n√∫mero:"));
smallest = number;
largest = number;

while (number !== 0) {
  if (number < smallest) {
    smallest = number;
  }
  if (number > largest) {
    largest = number;
  }
  number = Number(prompt("Digite um n√∫mero:"));
}

console.log("O menor valor digitado √©: " + smallest);
console.log("O maior valor digitado √©: " + largest);

// Quest√£o 12
let count = 0;
let number2 = 0;

console.log("Digite uma sequ√™ncia de n√∫meros inteiros (digite -1 para parar):");

while (number2 !== -1) {
  number2 = Number(prompt("Digite um n√∫mero:"));
  if (number2 !== -1) {
    sum += number2;
    count++;
  }
}

const average = sum / count;
console.log("A m√©dia dos n√∫meros digitados √©: " + average);

// Quest√£o 13
let number3 = Number(prompt("Digite um n√∫mero inteiro:"));
let sumOfCubedDigits = 0;

while (number3 > 0) {
  const digit = number3 % 10;
  sumOfCubedDigits += Math.pow(digit, 3);
  number3 = Math.floor(number3 / 10);
}

console.log("A soma dos d√≠gitos elevados ao cubo √©: " + sumOfCubedDigits);

// Quest√£o 14
let i9 = 1;
while (i9 <= 100) {
  if (i9 % 2 !== 0) {
    console.log(i9);
  }
  i9++;
}

// Quest√£o 15
let i10 = 1;
while (i10 <= 50) {
  if (i10 % 3 === 0) {
    console.log(i10);
  }
  i10++;
}

// Quest√£o 16
let i11 = 0;
let count1 = 0;

while (i11 < 5) {
  const nota = Number(prompt("Digite a nota do aluno:"));
  if (nota >= 7) {
    count1++;
  }
  i11++;
}

console.log(`O n√∫mero de alunos aprovados √©: ${count}`);

// Quest√£o 17
let countEven = 0;
let countOdd = 0;
let number4 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number4 !== 0) {
  if (number4 % 2 === 0) {
    countEven++;
  } else {
    countOdd++;
  }
  number4 = Number(prompt("Digite um n√∫mero inteiro:"));
}

console.log(
  "Quantidade de n√∫meros pares digitados antes do primeiro n√∫mero √≠mpar: " +
    countEven
);

// Quest√£o 18
let number1 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number1 !== 0) {
  if (number1 % 2 === 0) {
    countEven++;
  } else {
    countOdd++;
  }
  number1 = Number(prompt("Digite um n√∫mero inteiro:"));
  if (number1 % 2 === 0) {
    console.log("Quantidade de n√∫meros pares digitados: " + countEven);
    console.log("Quantidade de n√∫meros √≠mpares digitados: " + countOdd);
  }
}

// Quest√£o 19
let countDivisibleBy2 = 0;
let countDivisibleBy3 = 0;
let countDivisibleBy5 = 0;
let number5 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number5 !== 0) {
  if (number5 % 2 === 0) {
    countDivisibleBy2++;
  }
  if (number5 % 3 === 0) {
    countDivisibleBy3++;
  }
  if (number5 % 5 === 0) {
    countDivisibleBy5++;
  }
  number5 = Number(prompt("Digite um n√∫mero inteiro:"));
}

console.log("Quantidade de n√∫meros divis√≠veis por 2: " + countDivisibleBy2);
console.log("Quantidade de n√∫meros divis√≠veis por 3: " + countDivisibleBy3);
console.log("Quantidade de n√∫meros divis√≠veis por 5: " + countDivisibleBy5);

// Quest√£o 20
let sumDivisibleBy3 = 0;
let countDivisibleBy03 = 0;
let number6 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number6 !== 0) {
  if (number6 % 3 === 0) {
    sumDivisibleBy3 += number6;
    countDivisibleBy03++;
  }
  number6 = Number(prompt("Digite um n√∫mero inteiro:"));
}

if (countDivisibleBy3 > 0) {
  const averageDivisibleBy3 = sumDivisibleBy3 / countDivisibleBy3;
  console.log("A m√©dia dos n√∫meros divis√≠veis por 3 √©: " + averageDivisibleBy3);
} else {
  console.log("Nenhum n√∫mero divis√≠vel por 3 foi digitado.");
}

// Quest√£o 21
let countMoreThanThreeDigits = 0;
let number8 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number8 !== 0) {
  if (Math.abs(number8) >= 1000) {
    countMoreThanThreeDigits++;
  }
  number8 = Number(prompt("Digite um n√∫mero inteiro:"));
}

console.log(
  "Quantidade de n√∫meros com mais de tr√™s d√≠gitos: " + countMoreThanThreeDigits
);

// Quest√£o 22
let sumBetween50And100 = 0;
let countBetween50And100 = 0;
let number9 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number9 !== 0) {
  if (number9 > 50 && number9 < 100) {
    sumBetween50And100 += number9;
    countBetween50And100++;
  }
  number9 = Number(prompt("Digite um n√∫mero inteiro:"));
}

if (countBetween50And100 > 0) {
  const averageBetween50And100 = sumBetween50And100 / countBetween50And100;
  console.log(
    "A m√©dia dos n√∫meros entre 50 e 100 √©: " + averageBetween50And100
  );
} else {
  console.log("Nenhum n√∫mero entre 50 e 100 foi digitado.");
}

// Quest√£o 23
let smallestPositiveOdd: number = Infinity;
let number10: number = Number(prompt("Digite um n√∫mero inteiro:"));

while (number10 !== 0) {
  if (number10 > 0 && number10 % 2 !== 0 && number10 < smallestPositiveOdd) {
    smallestPositiveOdd = number10;
  }
  number10 = Number(prompt("Digite um n√∫mero inteiro:"));
}

if (smallestPositiveOdd !== Infinity) {
  console.log(
    "O menor valor positivo e √≠mpar digitado √©: " + smallestPositiveOdd
  );
} else {
  console.log("Nenhum n√∫mero positivo e √≠mpar foi digitado.");
}

// Quest√£o 24
let number11 = Number(prompt("Digite um n√∫mero inteiro:"));

while (number11 !== 0) {
  if (number11 % 2 === 0) {
    countEven++;
  } else {
    countOdd++;
  }
  number11 = Number(prompt("Digite um n√∫mero inteiro:"));
  if (number11 % 2 === 0) {
    console.log("Quantidade de n√∫meros pares digitados: " + countEven);
    console.log("Quantidade de n√∫meros √≠mpares digitados: " + countOdd);
  }
}
